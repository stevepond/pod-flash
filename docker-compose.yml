services:
  api:
    build:
      context: .
      dockerfile: packages/api/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - TEMPORAL_LOG_LEVEL=warn
      - DATABRICKS_TOKEN=${DATABRICKS_TOKEN}
      - DATABRICKS_ENDPOINT=${DATABRICKS_ENDPOINT}
      - S3_ENDPOINT=http://minio:9000
      - S3_REGION=us-east-1
      - S3_ACCESS_KEY_ID=minio
      - S3_SECRET_ACCESS_KEY=minio123
      - S3_BUCKET_NAME=pod-flash
      - MONGODB_URI=mongodb://mongodb:27017/pod-flash
      - REDIS_URL=redis://redis:6379
      - ML_SIDECAR_URL=http://ml-sidecar:5000
    command: pnpm start
    develop:
      watch:
        - path: ./packages/api/src
          target: /app/packages/api/src
          action: sync
    depends_on:
      temporal:
        condition: service_started
      cassandra:
        condition: service_healthy
      minio:
        condition: service_started
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

  temporal:
    image: temporalio/auto-setup:1.22.3
    ports:
      - "7233:7233"
      - "7234:7234"
      - "7235:7235"
    environment:
      - LOG_LEVEL=warn
      - SERVICES=frontend:matching:history:worker
      - ENABLE_ES=false
      - SKIP_DEFAULT_NAMESPACE_CREATION=false
      - DB=cassandra
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_KEYSPACE=temporal
      - CASSANDRA_REPLICATION_FACTOR=1
    depends_on:
      cassandra:
        condition: service_healthy

  temporal-admin-tools:
    image: temporalio/admin-tools:1.22.3
    depends_on:
      temporal:
        condition: service_started
      cassandra:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for Temporal to be ready...' &&
        sleep 30 &&
        for i in $(seq 1 5); do
          echo 'Attempt $i to check cluster health...' &&
          if temporal operator cluster health --address temporal:7233; then
            echo 'Cluster is healthy, creating namespaces...' &&
            temporal operator namespace create default --retention 1 &&
            temporal operator namespace create temporal-system --retention 1 &&
            break
          fi
          echo 'Cluster not ready yet, waiting...' &&
          sleep 30
        done
      "

  temporal-ui:
    image: temporalio/ui:latest
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - "8233:8080"
    depends_on:
      temporal:
        condition: service_started

  cassandra:
    image: cassandra:4
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_LOG_LEVEL=WARN
    volumes:
      - ./cassandra-logback.xml:/etc/cassandra/logback.xml
    develop:
      watch:
        - path: ./cassandra-logback.xml
          target: /etc/cassandra/logback.xml
          action: sync
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra", "-e describe keyspaces"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio
    command: server /data --console-address :9001
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_LOG_LEVEL: warn
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  ml-sidecar:
    build:
      context: .
      dockerfile: services/ml-sidecar/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/pod-flash
      - REDIS_URL=redis://redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  minio_data:
  mongodb_data:
  redis_data: